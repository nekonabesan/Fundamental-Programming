基礎プログラミングおよび演習レポート ＃08
学籍番号:1820004
氏名:大竹春生
ペア学籍番号・氏名(または「個人作業」):個人作業
提出日付:2018/12/03

[課題の再掲]
演習 3 モンテカルロ法で数値積分を行うときの、精度 (有効桁数) と試行の数との関係について考察
せよ。円周率の例題を活用してもよいが、できれば別の関数を積分するプログラムを作って検
討することが望ましい。


[実施したこととその結果]
■
/========================lec008/fp18_03.rb======================/
require 'benchmark'
require 'bigdecimal'
require 'bigdecimal/util'
require '../modules/fp_module.rb'

#/===============================================================/
# 演習 3 モンテカルロ法で数値積分を行うときの、
# 精度 (有効桁数) と試行の数との関係について考察せよ。
# 円周率の例題を活用してもよいが、
# できれば別の関数を積分するプログラムを作って検討することが望ましい。
#/===============================================================/
def pirandom(n)
  begin
    raise ArgumentError if n.nil?
    count = 0
    n.times do
      x = rand()
      y = rand()
      count = count + 1 if x**2 + y**2 < 1.0
    end
    return 4.0 * count / n
  rescue => e
    return e
  end
end

#/===============================================================/
# テキストの回答例
# param int
# param floot
#/===============================================================/
def integrandom(n)
  begin
    raise ArgumentError if n.nil?
    count = 0
    n.times do
      x = rand()
      y = rand()
      if y < x then
        count = count + 1
      end
    end
    return count / n.to_f
  rescue => e
    return e
  end
end

#/===============================================================/
# モンテカルロ法/打点計数による1次元積分
# f(x) = -x^2+9
# param int
# return array
#/===============================================================/
def funcrand1(n)
  begin
    raise ArgumentError if n.nil?
    cnt = 0
    results = Array.new
    n.times do
      x = rand(-3.0...3.0)
      y = rand(0.0...9.0)
      if y <= (-1 * (x**2 - 9)) then
        cnt += 1
      end
    end
    result = ((1.0/n.to_f) * cnt.to_f * 54.0)
    results.push(result)
    if 36 < result then
      results.push(result - 36)
    else
      results.push(36 - result)
    end
    return results
  rescue => e
    return e
  end
end

#/===============================================================/
# モンテカルロ法/数値積分による1次元積分
# (参)https://rayspace.xyz/CG/contents/montecarlo/
# f(x) = -x^2+9
# param int
# return array
#/===============================================================/
def funcrand2(n)
  begin
    raise ArgumentError if n.nil?
    cnt = 0
    results = Array.new
    result = 0;
    intnum = 0;
    n.times do
      x = rand(-3.0...3.0)
      y = rand(0.0...9.0)
      intnum += (-1 * (x**2 - 9))
    end
    result = (6.0/n.to_f) * intnum.to_f
    results.push(result)
    if 36 < result then
      results.push(result - 36.0)
    else
      results.push(36.0 - result)
    end
    return results
  rescue => e
    return e
  end
end
/===============================================================/
f(x) = -x^2 + 9 として
期待値S = 36、積分区間は-3<= x <=3、0<= y <= 9
①打点法(funcrand1)
②数値積分(funcrand2)
で試行回数と精度を確認する。
◆10回
/--------------------------funcrand1----------------------------/
irb(main):006:0> funcrand1 10
=> [32.400000000000006, 3.5999999999999943]
irb(main):007:0> funcrand1 10
=> [32.400000000000006, 3.5999999999999943]
irb(main):008:0> funcrand1 10
=> [27.0, 9.0]
irb(main):009:0> funcrand1 10
=> [21.6, 14.399999999999999]
irb(main):010:0> funcrand1 10
=> [43.2, 7.200000000000003]
irb(main):011:0>
/---------------------------funcrand2---------------------------/
irb(main):011:0> funcrand2 10
=> [38.488957197139754, 2.4889571971397544]
irb(main):012:0> funcrand2 10
=> [36.58121032293174, 0.5812103229317387]
irb(main):013:0> funcrand2 10
=> [34.33987610872562, 1.660123891274381]
irb(main):014:0> funcrand2 10
=> [37.105977629361476, 1.105977629361476]
irb(main):015:0> funcrand2 10
=> [43.56508164758114, 7.565081647581138]
irb(main):016:0>
/---------------------------------------------------------------/
◆100回
/--------------------------funcrand1----------------------------/
irb(main):017:0> funcrand1 100
=> [36.720000000000006, 0.720000000000006]
irb(main):018:0> funcrand1 100
=> [32.94, 3.0600000000000023]
irb(main):019:0> funcrand1 100
=> [41.04, 5.039999999999999]
irb(main):020:0> funcrand1 100
=> [35.64, 0.35999999999999943]
irb(main):021:0> funcrand1 100
=> [29.160000000000004, 6.839999999999996]
irb(main):022:0>
/---------------------------funcrand2---------------------------/
irb(main):022:0> funcrand2 100
=> [36.653166904448995, 0.6531669044489945]
irb(main):023:0> funcrand2 100
=> [34.85150877142138, 1.1484912285786208]
irb(main):024:0> funcrand2 100
=> [34.05442421380098, 1.9455757861990222]
irb(main):025:0> funcrand2 100
=> [34.01907585299316, 1.9809241470068386]
irb(main):026:0> funcrand2 100
=> [33.13449416007995, 2.865505839920047]
irb(main):027:0
/---------------------------------------------------------------/
◆1000回
/--------------------------funcrand1----------------------------/
irb(main):027:0> funcrand1 1000
=> [35.532000000000004, 0.4679999999999964]
irb(main):028:0> funcrand1 1000
=> [34.83, 1.1700000000000017]
irb(main):029:0> funcrand1 1000
=> [36.018, 0.018000000000000682]
irb(main):030:0> funcrand1 1000
=> [35.802, 0.1980000000000004]
irb(main):031:0> funcrand1 1000
=> [38.772, 2.7719999999999985]
irb(main):032:0>
/--------------------------funcrand2----------------------------/
irb(main):032:0> funcrand2 1000
=> [36.37570315029892, 0.3757031502989179]
irb(main):033:0> funcrand2 1000
=> [35.48739535082612, 0.5126046491738805]
irb(main):034:0> funcrand2 1000
=> [34.84261303823178, 1.1573869617682178]
irb(main):035:0> funcrand2 1000
=> [36.036174298359754, 0.03617429835975372]
irb(main):036:0> funcrand2 1000
=> [35.25084033703981, 0.7491596629601887]
irb(main):037:0>
/---------------------------------------------------------------/
◆10000回
/--------------------------funcrand1----------------------------/
irb(main):037:0> funcrand1 10000
=> [35.748000000000005, 0.25199999999999534]
irb(main):038:0> funcrand1 10000
=> [36.3258, 0.325800000000001]
irb(main):039:0> funcrand1 10000
=> [35.8614, 0.13859999999999673]
irb(main):040:0> funcrand1 10000
=> [36.0018, 0.0018000000000029104]
irb(main):041:0> funcrand1 10000
=> [35.5752, 0.4247999999999976]
irb(main):042:0>
/--------------------------funcrand2----------------------------/
irb(main):042:0> funcrand2 10000
=> [36.14257318852917, 0.14257318852916967]
irb(main):043:0> funcrand2 10000
=> [36.02964885419629, 0.02964885419628871]
irb(main):044:0> funcrand2 10000
=> [36.03987774964313, 0.039877749643132177]
irb(main):045:0> funcrand2 10000
=> [36.07411802330714, 0.07411802330714323]
irb(main):046:0> funcrand2 10000
=> [35.94115615530185, 0.058843844698152736]
irb(main):047:0>
/---------------------------------------------------------------/
◆100000回
/--------------------------funcrand1----------------------------/
irb(main):047:0> funcrand1 100000
=> [36.200520000000004, 0.20052000000000447]
irb(main):048:0> funcrand1 100000
=> [35.98452, 0.015479999999996608]
irb(main):049:0> funcrand1 100000
=> [36.00882, 0.00882000000000005]
irb(main):050:0> funcrand1 100000
=> [36.07146, 0.07146000000000186]
irb(main):051:0> funcrand1 100000
=> [36.144360000000006, 0.14436000000000604]
/--------------------------funcrand2----------------------------/
irb(main):052:0> funcrand2 100000
=> [36.01446486485259, 0.014464864852591575]
irb(main):053:0> funcrand2 100000
=> [36.00763335945739, 0.007633359457386746]
irb(main):054:0> funcrand2 100000
=> [36.019769608078875, 0.019769608078874512]
irb(main):055:0> funcrand2 100000
=> [36.0267372745944, 0.026737274594403004]
irb(main):056:0> funcrand2 100000
=> [35.98960129229164, 0.010398707708361599]
irb(main):057:0>
/---------------------------------------------------------------/
◆1000000回
/--------------------------funcrand1----------------------------/
irb(main):057:0> funcrand1 1000000
=> [36.009522, 0.009521999999996922]
irb(main):058:0> funcrand1 1000000
=> [36.028043999999994, 0.028043999999994185]
irb(main):059:0> funcrand1 1000000
=> [36.005364, 0.005364000000000146]
irb(main):060:0> funcrand1 1000000
=> [35.991054, 0.008946000000001675]
irb(main):061:0> funcrand1 1000000
=> [36.004176, 0.004176000000001068]
irb(main):062:0>
/--------------------------funcrand2----------------------------/
irb(main):062:0> funcrand2 1000000
=> [36.03405977338418, 0.03405977338417898]
irb(main):063:0> funcrand2 1000000
=> [35.98470368871457, 0.015296311285432296]
irb(main):064:0> funcrand2 1000000
=> [35.98885066976276, 0.011149330237238075]
irb(main):065:0> funcrand2 1000000
=> [35.95976150572487, 0.04023849427512971]
irb(main):066:0> funcrand2 1000000
=> [35.99186108253072, 0.008138917469281637]
irb(main):067:0>
/---------------------------------------------------------------/
◆10000000回
/--------------------------funcrand1----------------------------/
irb(main):067:0> funcrand1 10000000
=> [35.9923986, 0.007601399999998648]
irb(main):068:0> funcrand1 10000000
=> [35.9939268, 0.006073200000002998]
irb(main):069:0> funcrand1 10000000
=> [36.0030204, 0.0030203999999969255]
irb(main):070:0> funcrand1 10000000
=> [35.9873658, 0.012634200000000817]
irb(main):071:0> funcrand1 10000000
=> [35.997507, 0.0024930000000011887]
irb(main):072:0>
/--------------------------funcrand2----------------------------/
irb(main):072:0> funcrand2 10000000
=> [35.99376884638213, 0.006231153617868301]
irb(main):073:0> funcrand2 10000000
=> [35.99223688836007, 0.007763111639931708]
irb(main):074:0> funcrand2 10000000
=> [36.00063896148925, 0.0006389614892512441]
irb(main):075:0> funcrand2 10000000
=> [36.002065402871686, 0.002065402871686217]
irb(main):076:0> funcrand2 10000000
=> [36.00063444971391, 0.0006344497139068039]
irb(main):077:0>
/---------------------------------------------------------------/
[考察]
試行回数1000回程度までは数値積分の精度が比較的安定していた。
更に試行回数を増やして実施した所、
数値積分は打点法に比して期待値との差分は僅少である特性が確認できた。
但し、①、②いずれのケースも実用に耐えうると思われる精度を得る為の試行回数は10000回を超えるものと思われる。

[アンケート]