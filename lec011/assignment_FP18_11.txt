基礎プログラミングおよび演習レポート ＃11
学籍番号:1820004
氏名:大竹春生
ペア学籍番号・氏名(または「個人作業」):個人作業
提出日付:2018/12/23

[課題の再掲]
「演習 1」～「演習 6」の (小) 課題から「10 個以上」選択してプログラムを作り、レポートを提出しなさい。
ただし、演習 3 以降が含まれる場合は「1 個以上」でよい。プログラムと、
課題に対する報告・考察 (やってみた結果・そこから分かったことの記述) が含まれること。
アンケートの回答もおこなうこと。

演習 4 区間 2 分法によって平方根を求める C プログラムを作成しなさい。必要と思われる精度にし
たとき、繰り返し回数がいくつになるか検討しなさい。

[実施したこととその結果]
/====================lec011/modules/fp11_04_module.c===========================/
//-----------------------------------------------------------------------------//
// Google Test用includeヘッダ
// 本番ビルド時はコメントアウト
//-----------------------------------------------------------------------------//
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

const int TRUE = 1;
const int FALSE = 0;
//const int DENOMINATOR = 10000000;
//-----------------------------------------------------------------------------//
// 演習 4 区間 2 分法によって平方根を求める C プログラムを作成しなさい。
// 必要と思われる精度にしたとき、繰り返し回数がいくつになるか検討しなさい。
//-----------------------------------------------------------------------------//
double calc04(double x, int d){
  double a = 0;
  double b = x;
  double c = 0;
  double f = 0;
  int i = 0;
  while(1){
    c = (a + b)/2;
    f = pow(c, 2.0);
    if(f == x || i == d){
      break;
    }else if(f < x){
      a = c;
    }else{
      b = c;
    }
    i++;
  }
  return c;
}
/==============================================================================/
/============================lec011/fp11_04.c==================================/
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "modules/fp11_04_module.c"

int main(void) {
  // 演習 3
  printf("%s\n", "演習 4");
  printf("%.20f\n", 1.4142135623730951);
  printf("calc04(2.0, 10) sqrt =>  %.20f\n", calc04(2.0, 10));
  printf("calc04(2.0, 100) sqrt =>  %.20f\n", calc04(2.0, 100));
  printf("calc04(2.0, 1000) sqrt =>  %.20f\n", calc04(2.0, 1000));
  printf("calc04(2.0, 10000) sqrt =>  %.20f\n", calc04(2.0, 10000));
  printf("calc04(2.0, 100000) sqrt =>  %.20f\n", calc04(2.0, 100000));
  printf("calc04(2.0, 1000000) sqrt =>  %.20f\n", calc04(2.0, 1000000));
  printf("calc04(2.0, 10000000) sqrt =>  %.20f\n", calc04(2.0, 10000000));
  return FALSE;
}

[考察]
◆実行結果
・演習４(区間 2 分法)
/------------------------------------------------------------------------------/
sheepdog@sheepdog-ThinkPad-X1-Carbon-6th:~/git/fp18/lec011$ ./a.out
演習 4
1.41421356237309514547
calc04(2.0, 10) sqrt =>  1.41503906250000000000
calc04(2.0, 100) sqrt =>  1.41421356237309492343
calc04(2.0, 1000) sqrt =>  1.41421356237309492343
calc04(2.0, 10000) sqrt =>  1.41421356237309492343
calc04(2.0, 100000) sqrt =>  1.41421356237309492343
calc04(2.0, 1000000) sqrt =>  1.41421356237309492343
calc04(2.0, 10000000) sqrt =>  1.41421356237309492343
/------------------------------------------------------------------------------/
１００回程度である程度実用的な精度が得られた。
演習5の実行結果と比較したところ、
・演習5(ニュートン法)
/------------------------------------------------------------------------------/
sheepdog@sheepdog-ThinkPad-X1-Carbon-6th:~/git/fp18/lec011$ ./a.out
演習 5
1.41421356237309514547
calc05(2.0, 1)        sqrt =>  1.41666666666666651864
calc05(2.0, 2)        sqrt =>  1.41421568627450966460
calc05(2.0, 3)        sqrt =>  1.41421356237468986983
calc05(2.0, 4)        sqrt =>  1.41421356237309492343
calc05(2.0, 5)        sqrt =>  1.41421356237309492343
calc05(2.0, 10)       sqrt =>  1.41421356237309492343
calc05(2.0, 100)      sqrt =>  1.41421356237309492343
calc05(2.0, 1000)     sqrt =>  1.41421356237309492343
calc05(2.0, 10000)    sqrt =>  1.41421356237309492343
calc05(2.0, 100000)   sqrt =>  1.41421356237309492343
calc05(2.0, 1000000)  sqrt =>  1.41421356237309492343
calc05(2.0, 10000000) sqrt =>  1.41421356237309492343
/------------------------------------------------------------------------------/
試行回数10回以下で十分な精度が得られる。
演習5の実行結果について、あまりに簡便に精度が得られるため以下のソースに対して、
/=======================lec011/modules/fp11_05_module.c========================/
const int TRUE = 1;
const int FALSE = 0;
//const int DENOMINATOR = 10000000;
//-----------------------------------------------------------------------------//
// 演習 5 ニュートン法によって平方根を求める C プログラムを作成しなさい。
// 必要と思われる精度にしたとき、繰り返し回数がいくつになるか検討しなさい。
// (ヒント: 繰り返しごとに現在の近似値を書き出すのでもよいですね。)
//-----------------------------------------------------------------------------//
double calc05(double n, int d){
  double f = n;
  double dx = 2 * n;
  int cnt = 0;
  while(1){
    if(cnt > d){
      break;
    }
    dx = f;
    f = 0.5 * dx + 0.5 * n / dx;
    cnt++;
  }
  return f;
}
/==============================================================================/
以下のテストを実施。
※テストコード略
試験対象の値が大きくなると精度と試行回数の関係に変化が生じるという想定の下UT実行。
・UT実施結果
/------------------------------------------------------------------------------/
heepdog@sheepdog-ThinkPad-X1-Carbon-6th:~/git/fp18/lec011/test/fp11_05$ make
gcc -c ../../modules/fp11_05_module.c
g++ fp11_05_test.cpp ../googletest-release-1.8.1/googletest/src/gtest_main.cc gtest/gtest-all.cc -I. -lpthread fp11_05_module.o
./a.out
Running main() from ../googletest-release-1.8.1/googletest/src/gtest_main.cc
[==========] Running 5 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 5 tests from fixtureName
[ RUN      ] fixtureName.sqrt01
[       OK ] fixtureName.sqrt01 (1 ms)
[ RUN      ] fixtureName.sqrt02
[       OK ] fixtureName.sqrt02 (0 ms)
[ RUN      ] fixtureName.sqrt03
[       OK ] fixtureName.sqrt03 (0 ms)
[ RUN      ] fixtureName.sqrt25
fp11_05_test.cpp:60: Failure
Expected equality of these values:
  calc05(25.0, 1)
    Which is: 7.46154
  5.0
    Which is: 5
[  FAILED  ] fixtureName.sqrt25 (0 ms)
[ RUN      ] fixtureName.sqrt36
fp11_05_test.cpp:65: Failure
Expected equality of these values:
  calc05(36.0, 1)
    Which is: 10.223
  36.0
    Which is: 36
[  FAILED  ] fixtureName.sqrt36 (0 ms)
[----------] 5 tests from fixtureName (1 ms total)

[----------] Global test environment tear-down
[==========] 5 tests from 1 test case ran. (1 ms total)
[  PASSED  ] 3 tests.
[  FAILED  ] 2 tests, listed below:
[  FAILED  ] fixtureName.sqrt25
[  FAILED  ] fixtureName.sqrt36

 2 FAILED TESTS
Makefile:11: recipe for target 'all' failed
make: *** [all] Error 1
/------------------------------------------------------------------------------/
上記の実行結果を得た。
予想通り試験対象値25、36の1回目でFAILED
・25、36の戻り値を計測。
以下の実行結果を得た。
/------------------------------------------------------------------------------/
sheepdog@sheepdog-ThinkPad-X1-Carbon-6th:~/git/fp18/lec011$ ./a.out
演習 5
1.41421356237309514547
calc05(2.0, 1)        sqrt =>  1.41666666666666651864
calc05(2.0, 2)        sqrt =>  1.41421568627450966460
calc05(2.0, 3)        sqrt =>  1.41421356237468986983
calc05(2.0, 4)        sqrt =>  1.41421356237309492343
calc05(2.0, 5)        sqrt =>  1.41421356237309492343
calc05(2.0, 10)       sqrt =>  1.41421356237309492343
calc05(2.0, 100)      sqrt =>  1.41421356237309492343
calc05(2.0, 1000)     sqrt =>  1.41421356237309492343
calc05(2.0, 10000)    sqrt =>  1.41421356237309492343
calc05(2.0, 100000)   sqrt =>  1.41421356237309492343
calc05(2.0, 1000000)  sqrt =>  1.41421356237309492343
calc05(2.0, 10000000) sqrt =>  1.41421356237309492343
//----------------------------------------------------//
1.41421356237309514547
calc05(25.0, 1)       sqrt =>  7.46153846153846167510
calc05(25.0, 2)       sqrt =>  5.40602696272799398969
calc05(25.0, 3)       sqrt =>  5.01524760194489793719
calc05(25.0, 4)       sqrt =>  5.00002317825394904105
calc05(25.0, 5)       sqrt =>  5.00000000005372235989
calc05(25.0, 10)      sqrt =>  5.00000000000000000000
calc05(25.0, 100)     sqrt =>  5.00000000000000000000
calc05(25.0, 1000)    sqrt =>  5.00000000000000000000
//----------------------------------------------------//
1.41421356237309514547
calc05(36.0, 1)       sqrt =>  10.22297297297297369312
calc05(36.0, 2)       sqrt =>  6.87222673764312919076
calc05(36.0, 3)       sqrt =>  6.05535174484947891216
calc05(36.0, 4)       sqrt =>  6.00025298411941854226
calc05(36.0, 5)       sqrt =>  6.00000000533318900153
calc05(36.0, 10)      sqrt =>  6.00000000000000000000
calc05(36.0, 100)     sqrt =>  6.00000000000000000000
calc05(36.0, 1000)    sqrt =>  6.00000000000000000000
/------------------------------------------------------------------------------/
検査対象値、平方値が大きくなる毎に試行回数が少ない場合に、
得られる値が極端に期待値と乖離する特性が確認できた。
(参考)
/------------------------------------------------------------------------------/
1.41421356237309514547
calc05(2,500,000,000.0, 1)       sqrt =>  625000001.25000000000000000000
calc05(2,500,000,000.0, 2)       sqrt =>  312500002.62500000000000000000
calc05(2,500,000,000.0, 3)       sqrt =>  156250005.31249997019767761230
calc05(2,500,000,000.0, 4)       sqrt =>  78125010.65624971687793731689
calc05(2,500,000,000.0, 5)       sqrt =>  39062521.32812267541885375977
calc05(2,500,000,000.0, 10)      sqrt =>  1221385.71516122156754136086
calc05(2,500,000,000.0, 20)      sqrt =>  50000.00000000000000000000
calc05(2,500,000,000.0, 30)      sqrt =>  50000.00000000000000000000
calc05(2,500,000,000.0, 100)     sqrt =>  50000.00000000000000000000
calc05(2,500,000,000.0, 1000)    sqrt =>  50000.00000000000000000000
/------------------------------------------------------------------------------/
※但し20回程度の試行回数で十分な精度は得られる。


[アンケート]
Q1. C 言語でプログラムが書けるようになりましたか。
ある程度。
Q2. C と Ruby はどのように違うと感じていますか。
ある程度。
Q3. 課題に対する感想と今後の要望をお書きください。
特になし。
