基礎プログラミングおよび演習レポート ＃12
学籍番号:1820004
氏名:大竹春生
ペア学籍番号・氏名(または「個人作業」):個人作業
提出日付:

[課題の再掲]
「演習 1」～「演習 7」の (小) 課題から 1 つ以上を選択してプログラムを作り、レポートを提出しなさい。
プログラムと、課題に対する報告・考察 (やってみた結果・そこから分かったことの記述) が含まれること。
アンケートの回答もおこなうこと。

[実施したこととその結果]
◆課題コード(演習4)
※文字制限の為ソースコードは以下のアドレス参照
・lec012/modiles/fp12_04_module.c
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec012/modules/fp12_04_module.c
・lec012/fp12_04.c
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec012/fp12_04.c

◆テストコード(演習4)
・lec012/test/fp12_04/Makefile
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec012/test/fp12_04/Makefile
・lec012/test/fp12_04/fp12_04_targrt.h
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec012/test/fp12_04/fp12_04_target.h
・lec012/test/fp12_04/fp12_04_test.cpp
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec012/test/fp12_04/fp12_04_test.cpp

◆課題コード(演習5)
・lec012/modules/fp12_05_module.c
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec012/modules/fp12_05_module.c

◆テストコード(演習5)
・lec012/test/fp12_05/Makefile
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec012/test/fp12_05/Makefile
・lec012/test/fp12_05/fp12_05_target.h
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec012/test/fp12_05/fp12_05_target.h
・lec012/test/fp12_05/fp12_05_test.cpp
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec012/test/fp12_05/fp12_05_test.cpp

[考察]
◆実行結果(課題4)
/------------------------------------------------------------------------------/
sheepdog@sheepdog-PC:/mnt/c/Git/fp18/lec012$ ./a.out
input number (0 for end)> 1
room price for 1 => 5000; 1
input number (0 for end)> 2
room price for 2 => 10000; 1 1
input number (0 for end)> 3
room price for 3 => 12000; 3
input number (0 for end)> 4
room price for 4 => 17000; 1 3
input number (0 for end)> 5
room price for 5 => 20000; 7
input number (0 for end)> 6
room price for 6 => 20000; 7
input number (0 for end)> 7
room price for 7 => 20000; 7
input number (0 for end)> 8
room price for 8 => 25000; 1 7
input number (0 for end)> 9
room price for 9 => 30000; 1 1 7
input number (0 for end)> 10
room price for 10 => 30000; 13
input number (0 for end)> 11
room price for 11 => 30000; 13
input number (0 for end)> 12
room price for 12 => 30000; 13
input number (0 for end)> 13
room price for 13 => 30000; 13
input number (0 for end)> 14
room price for 14 => 35000; 1 13
input number (0 for end)> 15
room price for 15 => 40000; 1 1 13
input number (0 for end)>
/------------------------------------------------------------------------------/
◆UT(演習4)
/------------------------------------------------------------------------------/
sheepdog@sheepdog-PC:/mnt/c/Git/fp18/lec012/test/fp12_04$ make
gcc -c ../../modules/fp12_04_module.c
g++ fp12_04_test.cpp googletest-release-1.8.1/googletest/src/gtest_main.cc gtest/gtest-all.cc -I. -lpthread fp12_04_module.o
./a.out
Running main() from googletest-release-1.8.1/googletest/src/gtest_main.cc
[==========] Running 3 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 3 tests from fixtureName
[ RUN      ] fixtureName.initialize
[       OK ] fixtureName.initialize (0 ms)
[ RUN      ] fixtureName.room1
[       OK ] fixtureName.room1 (0 ms)
[ RUN      ] fixtureName.room2
[       OK ] fixtureName.room2 (0 ms)
[----------] 3 tests from fixtureName (3 ms total)

[----------] Global test environment tear-down
[==========] 3 tests from 1 test case ran. (5 ms total)
[  PASSED  ] 3 tests.
/------------------------------------------------------------------------------/
◆UT(演習5)
/------------------------------------------------------------------------------/
sheepdog@sheepdog-PC:/mnt/c/Git/fp18/lec012/test/fp12_05$ make
gcc -c ../../modules/fp12_05_module.c
g++ fp12_05_test.cpp googletest-release-1.8.1/googletest/src/gtest_main.cc gtest/gtest-all.cc -I. -lpthread fp12_05_module.o
./a.out
Running main() from googletest-release-1.8.1/googletest/src/gtest_main.cc
[==========] Running 3 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 3 tests from fixtureName
[ RUN      ] fixtureName.initialize
[       OK ] fixtureName.initialize (0 ms)
[ RUN      ] fixtureName.coin1
[       OK ] fixtureName.coin1 (0 ms)
[ RUN      ] fixtureName.coin2
[       OK ] fixtureName.coin2 (0 ms)
[----------] 3 tests from fixtureName (1 ms total)

[----------] Global test environment tear-down
[==========] 3 tests from 1 test case ran. (2 ms total)
[  PASSED  ] 3 tests.
/------------------------------------------------------------------------------/
設問のケースの様に特に境界値観点で戻り値の妥当性を検証する必要がある場合、
ユニットテストはほぼ必須であることが確認できた。
設問のケースは条件関係も比較的単純であり、
手打ちで実行しながら戻り値確認を実施することも不可能ではないが、
頻繁にリファクタリングを繰り返す様なケースでは寧ろテストコードが資産となる場合も多くUT導入は必須と考える。
演習5は確認観点が多いためUTのみを実施した。

以下を参考にGoogleTestを導入。
https://qiita.com/igayu/items/9ff003309b237e9ae116
http://opencv.jp/googletestdocs/primer.html#primer-assertions

[アンケート]
Q1. C 言語で配列を取り扱えるようになりましたか。
ある程度。
Q2. 動的計画法を理解しましたか。またどのように思いましたか。
ある程度。
Q3. 課題に対する感想と今後の要望をお書きください。
特になし。
