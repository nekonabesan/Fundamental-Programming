基礎プログラミングおよび演習レポート ＃05
学籍番号:1820004
氏名:大竹春生
ペア学籍番号・氏名(または「個人作業」):個人作業
提出日付:2018/10/30

[課題の再掲]
演習 3 次のような手続きを追加して円以外の図形を塗ってみよ。
a. ドーナツ型を塗るメソッド。4
b. 長方形または楕円を塗るメソッド。
c. 三角形を塗るメソッド。
d. その他、自分の好きな形を塗るメソッド。

[実施したこととその結果]
◆図形描画処理クラスを呼び出し図形を書き出す処理
/==============================lec005/fp05_03.rb===============================/
require __dir__ + '/../modules/fp_image.rb'

=begin
a. ドーナツ型を塗るメソッド。4
=end
def a
  begin
    obj = FpImage.new
    # 一度塗りつぶす
    obj.fillcircle(100,100,90,39,38,144)
    # 中心部分を白で塗りつぶす
    obj.fillcircle(100,100,70,255,255,255)
    obj.writeimage("img/3a.ppm")
    return true
  rescue => e
    return e
  end
end

=begin
b. 長方形または楕円を塗るメソッド。
=end
def b
  begin
    obj = FpImage.new
    obj.ellipse(150,100,40,20,0,0,255)
    obj.writeimage("img/3b.ppm")
    return true
  rescue => e
    return e
  end
end

=begin
c. 三角形を塗るメソッド。
=end
def c
  begin
    obj = FpImage.new
    obj.triangle(150,50,100,150,200,150,0,0,255)
    obj.writeimage("img/3c.ppm")
    return true
  rescue => e
    return e
  end
end

=begin
d. その他、自分の好きな形を塗るメソッド。
=end
def d
  begin
    obj = FpImage.new
    obj.rectangle(100,110,100,20,0,0,255)
    obj.writeimage("img/3d.ppm")
    return true
  rescue => e
    return e
  end
end
/==============================================================================/
◆図形描画処理を集約したクラス
/=============================modules/fp_image.rb==============================/
class FpImage

  def initialize
    @Pixel = Struct.new(:r, :g, :b)
    @img = Array.new(200) do
      Array.new(300) do @Pixel.new(255,255,255) end
    end
  end

  def pset(x,y,r,g,b)
    if 0 <= x && x < 300 && 0 <= y && y < 200
      @img[y][x].r = r; @img[y][x].g = g; @img[y][x].b = b
    end
  end

  def writeimage(name)
    open(name, "wb") do |f|
      f.puts("P6\n300 200\n255")
      @img.each do |a|
        a.each do |p| f.write(p.to_a.pack("ccc")) end
      end
    end
  end

  def fillcircle(x0, y0, rad, r, g, b)
    begin
      200.times do |y|
        300.times do |x|
          if (x-x0)**2 + (y-y0)**2 <= rad**2 then pset(x, y, r, g, b) end
        end
      end
    rescue => e
      return e
    end
  end

  def ellipse(x0, y0, prm_a, prm_b, r, g, b)
    begin
      200.times do |y|
        300.times do |x|
          if (((x-x0).to_f**2)/(prm_a.to_f**2)) + (((y-y0).to_f**2)/(prm_b.to_f**2)) <= 1.0 then
            pset(x, y, r, g, b)
          end
        end
      end
    rescue => e
      return e
    end
  end

  def triangle(x0, y0, x1, y1, x2, y2, r, g, b)
    begin
      200.times do |y|
        300.times do |x|
          if (x1 - x0)*(y - y0) - (y1 - y0)*(x - x0) <= 0 && (x2 - x0)*(y - y0) - (y2 - y0)*(x - x0) >= 0 && (x2 - x1)*(y - y1) - (y2 - y1)*(x - x1) <= 0 then
            pset(x, y, r, g, b)
          end
        end
      end
      return true
    rescue => e
      return e
    end
  end

  def rectangle(x, y, w, h, r, g, b)
    j0 = (y - 0.5 * h).to_i
    j1 = (y + 0.5 * h).to_i
    i0 = (x - 0.5 * w).to_i
    i1 = (x + 0.5 * w).to_i
    j0.step(j1) do |j|
      i0.step(i1) do |i| pset(i, j, r, g, b) end
    end
  end
end
/==============================================================================/
[考察]
「#06 画像の生成(総合実習)」に備え、基本的な図形を描画する処理をクラス「FpImage」へ集約した。
上記の実装とすることで、同一の図形を描画する処理の実装が容易となる。
またFpImageの各メソッド(楕円、長方形、三角形)メソッドを呼び出し、
単純な図形を組み合わせた「建物」や「木」等の定型的な背景オブジェクトを生成するメソッドの実装も考慮した。
◆抽象度の異なるメソッドを組み合わせて画像を生成する処理(例)
・図形クラス(抽象度高)
├楕円メソッド
├長方形メソッド
└三角形メソッド
↓
・風景オブジェクト生成クラス(抽象度中)
├・家メソッド
│図形クラス.長方形メソッド、図形クラス.三角形メソッドを呼び出し「家」オブジェクトを生成
└・木メソッド
　図形クラス.長方形メソッド、図形クラス.楕円メソッドを呼び出し「木」オブジェクトを生成
↓
・風景画像生成クラス(抽象度低)
├・図形を組み合わせて「背景」を生成するメソッド
├・風景オブジェクト生成クラス.家メソッドを呼び出し背景に家オブジェクトを配置するメソッド
└・風景オブジェクト生成クラス.木メソッドを呼び出し背景に木オブジェクトを配置するメソッド

[アンケート]
Q1. 手続きが使いこなせるようになりましたか。
ある程度使いこなせるという認識です。
Q2. 再帰的な呼び出しについてはどうですか。
ある程度使いこなせるという認識です。
Q3. リフレクション(今回の課題で分かったこと)・感想・要望をどうぞ。
特になし
