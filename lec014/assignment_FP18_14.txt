基礎プログラミングおよび演習レポート ＃14
学籍番号:1820004
氏名:大竹春生
ペア学籍番号・氏名(または「個人作業」):個人作業
提出日付:

[課題の再掲]
「演習 1」～「演習 6」の (小) 課題から 1 つ以上を選択してプログラムを作り、レポートを提出しなさい。
プログラムと、課題に対する報告・考察 (やってみた結果・そこから分かったことの記述) が
含まれること。アンケートの回答もおこなうこと。

演習 3 上の例題をそのまま打ち込んで動かしなさい。動いたら次の変更をしてみなさい。
a. 登録できる値を整数 1 個から変更しなさい (整数 2 個とか文字列とか)。
b. 今は表は追加と書き換えしかできないが、削除機能をつけてみなさい。
c. 表の中身を全部まとめて表示する機能をつけてみなさい。
(ヒント: この機能そのものは tbllinear1.c の中に置くのが自然で、main からそれを呼び出す。
どういう場合にこの機能が呼ばれることにするかは好きに決めてかまいません。)
d. そのほか、面白いと思う機能をつけてみなさい。

[実施したこととその結果]
◆ソースコード
※文字数制限の関係上Gitアドレスを掲載する
・lec014/fp14_common.h
※構造体定義
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec014/fp14_common.h
・develop/lec014/modules/fp14_03_module.c
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec014/modules/fp14_03_module.c

◆テストコード
※文字数制限の関係上Gitアドレスを掲載する
・lec014/test/fp14_03/fp14_03_test.cpp
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec014/test/fp14_03/fp14_03_test.cpp

[考察]
◆概要
線形リストは片方向、双方向を共に比較的簡単に実装できる特性がある。
本課題において可能な限りダイナミック・アロケーションを意識し双方向リストを実装した。

◆考察
実装例は大域変数を用いた実装となっているが、本課題においては、
標準ライブラリのメモリ・アロケーション機能を利用し可能な限りセキュアな実装を試みた。
木構造と異なり線形リストは特段に困難な実装とはならなかった。

[アンケート]
Q1. 構造体を使ったプログラムが書けるようになりましたか。
ある程度。
Q2. 表と検索とはどういうことか理解しましたか。
ある程度。
Q3. 課題に対する感想と今後の要望をお書きください。
特になし。
