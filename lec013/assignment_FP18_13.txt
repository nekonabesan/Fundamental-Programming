基礎プログラミングおよび演習レポート ＃13
学籍番号:1820004
氏名:大竹春生
ペア学籍番号・氏名(または「個人作業」):個人作業
提出日付:

[課題の再掲]
「演習 1」～「演習 5」の (小) 課題から 1 つ以上を選択してプログラムを作り、レポートを提出しなさい。
プログラムと、課題に対する報告・考察 (やってみた結果・そこから分かったことの記述) が含まれること。
アンケートの回答もおこなうこと。

演習 4 上のコードを打ち込み、パターンが正しく処理されていることを確認しなさい。
OK なら、次のことをやってみなさい。
a. 「+」(1 回以上の繰り返し) に加えて「*」(0 回以上の繰り返し) も記述できるようにしてみなさい。
b. 「?」(直前の文字があってもなくてもよい) を実現してみなさい。
c. ^(先頭に固定) と$(末尾に固定) を実現してみなさい。
d. 文字クラス[...](...の文字のいずれかならあてはまる)を実現してみなさい。
[^...](...のいずれでもなければ) も実現できるとなおよいです。
e. ここまでに出て来た特殊文字の機能をなくすエスケープ記号「\」を実現しなさい
(この文字に続いて特殊文字があった場合通常の文字として扱う)。
f. その他、パターンマッチにおいてあると面白いと思う好きな機能を選び実現しなさい。

[実施したこととその結果]
◆実装の方針
・ORは実装しない
　※字句解析、構文解析処理の機能を線形リストで対応可能な範囲に限定する。
・小課題dの機能は実装しない

◆ソースコード
※文字数制限の関係上Gitアドレスを掲載する
・パターンマッチ本体
※関数「pattern_match」
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec013/modules/fp13_04_header.c
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec013/modules/fp13_04_module.c
・構文解析
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec013/modules/fp13_04_pars.c
・NAF(DAF)変換
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec013/modules/fp13_04_naf.c

[考察]
◆概要
正規表現の実装については
・字句解析
・構文解釈
・NAF変換
・DAF(決定性有限オートマトン)変換
の順序で実装される。

本課題においては時間的な制約により機能を絞り込み
字句解析および構文解釈を「fp13_04_pars.c」として実装、
NAF変換およびDAF(決定性有限オートマトン)変換を「fp13_04_naf.c」として実装した。

本課題の内容に関しては各小課題の内容通りの実装を行う場合、
正規表現そのものに加えて、ダイナミック・アロケーションに関連するモジュールの実装が不可避であり、
あくまで既知の範囲で実装するとの方針を立て比較的単純な実装に留めた。

◆実行結果
※文字数制限の関係上Gitアドレスを掲載する
ターミナル実行によりマッチパターンを担保することは現実的ではないため、
以下のテストコードにより文字列のマッチを行った。
・パターンマッチ本体(テストコード)
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec013/test/fp13_04/fp13_04_test.cpp
・構文解析(テストコード)
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec013/test/fp13_04_pars/fp13_04_pars_test.cpp
・NAF(DAF)変換
https://github.com/nekonabesan/Fundamental-Programming/blob/develop/lec013/test/fp13_04_naf/fp13_04_naf_test.cpp

◆考察
C言語において決定性有限オートマトンを実現するためには、
モデルそのものに比してデータ構造の設計実装に関する前提が重要となる。
具体的には木構造によるデータ保持、並びにダイナミック・アロケーションの実装が不可欠となる。

上記を踏まえて、本課題においては、
単線的なデータ構造で取り扱える範囲のパターンマッチングの実装に注力した。

結果的に字句分析/構文解釈については相当単純な実装で機能を実現できた。
ただし簡易的なDAFとして配列化されたマッチパターンを生成する処理は、
機能制限を前提としたとはいえ実装が肥大化し処理が硬直化する結果となった。

[アンケート]
Q1. 文字列の基本的な操作ができるようになりましたか。
ある程度。
Q2. 文字列から整数や実数を作り出す原理が分かりましたか。
ある程度。
Q3. 課題に対する感想と今後の要望をお書きください。
特になし。
