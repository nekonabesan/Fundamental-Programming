基礎プログラミングおよび演習レポート ＃03
学籍番号:1820004
氏名:大竹春生
ペア学籍番号・氏名(または「個人作業」):個人作業
提出日付:2018/10/16

[課題の再掲]
演習 6
「素数列挙」の問題は、配列を使うとより高速にできる可能性がある。次の 2 つの方針を用
いたプログラムを作成し、これまでに作ったものと速度を比較せよ。

a. 素数は値の大きいところではまばらにしかないので、これまでに見つかった素数を配列に
覚えておき、新たな素数の候補をチェックする時に「これまで見つかった素数で割ってみ
て割り切れなければ素数」という方針にすれば、チェックする回数がかなり少なくできる。

b. 別の考え方として、N 未満の素数を打ち出すのに次の方針を用いるのはどうだろう。
• 論理値が並んだ要素数 N の配列を作り、全部「真」に初期化。
• 2 から始めて順次、その番号が「真」の値は素数として出力。
• 2、4、6、…と、2 の倍数番目の部分を「偽」に変更。
• 3、6、9、…と、3 の倍数番目の部分を「偽」に変更。
• 同様に、素数を出力するごとにその倍数番目を「偽」に変更。


[実施したこととその結果]
素数列挙として以下のメソッドを実装
a_0 → 素数列挙を最も素直に実装したベンチマーク用メソッド
a_1 → 設問a
a_2 → 設問aの改良
b_1 → 設問b
b_2 → 設問bの改良
/==========================lec003/fp03_06.rb============================/
require __dir__ + '/../modules/fp_pno.rb'
require 'benchmark'
require 'bigdecimal'
require 'bigdecimal/util'

=begin
素数判定の最も素朴な実装
=end
def a_0(n)
  begin
    raise ArgumentError if n.nil? || 2 > n
    obj = FpPno.new(n)
    n = n.to_i.abs
    result = []
    #/==============計測開始==============/
    time = Benchmark.realtime do
      for i in 2..n do
        result.push(i) if obj.judgePno(i)
      end
    end
    puts("(全検索)処理時間 #{time}s")
    #/=============計測終了===============/
    return result
  rescue => e
    return e
  end
end

=begin
a. 素数は値の大きいところではまばらにしかないので、これまでに見つかった素数を配列に
覚えておき、新たな素数の候補をチェックする時に「これまで見つかった素数で割ってみ
て割り切れなければ素数」という方針にすれば、チェックする回数がかなり少なくできる。
=end
def a_1(n)
  begin
    raise ArgumentError if n.nil? || 2 > n
    results = []
    obj = FpPno.new(n)
    #/==============計測開始==============/
    time = Benchmark.realtime do
      for i in 2..n do
        sw = false
        #results.each{ |k| sw = true if i % k == 0 }
        # 既知の素数と剰余を取る処理
        results.each do |k|
          if i % k == 0 then
            sw = true
            break
          end
        end
        next if sw == true
        results.push(i) if obj.judgePno(i) == true
      end
    end
    puts("(a_1)処理時間 #{time}s")
    #/=============計測終了===============/
    return results
  rescue => e
    return e
  end
end

=begin
a. 改良版
   偶数を検査対象から除外
=end
def a_2(n)
  begin
    raise ArgumentError if n.nil? || 2 > n
    obj = FpPno.new(n)
    results = Array.new
    results.push(2)
    i = 3
    #/==============計測開始==============/
    time = Benchmark.realtime do
      while n >= i do
        sw = false
        # 既知の素数と剰余を取る処理
        results.each do |k|
          if i % k == 0 then
            sw = true
            break
          end
        end
        if sw == true then
          i += 2
          next
        end
        results.push(i) if obj.judgePno2(i) == true
        i += 2
      end
    end
    puts("(a_2)処理時間 #{time}s")
    #/=============計測終了===============/
    return results
  rescue => e
    return e
  end
end

=begin
b. 別の考え方として、N 未満の素数を打ち出すのに次の方針を用いるのはどうだろう。
• 論理値が並んだ要素数 N の配列を作り、全部「真」に初期化。
• 2 から始めて順次、その番号が「真」の値は素数として出力。
• 2、4、6、…と、2 の倍数番目の部分を「偽」に変更。
• 3、6、9、…と、3 の倍数番目の部分を「偽」に変更。
• 同様に、素数を出力するごとにその倍数番目を「偽」に変更
=end
def b_1(n)
  begin
    raise ArgumentError if n.nil? || 2 > n
    obj = FpPno.new(n)
    results = Array.new
    #/==============計測開始==============/
    time = Benchmark.realtime do
      for i in 2..n do
        next if obj.chkNotPno(i) == true
        if obj.judgePno(i) == true then
          results.push(i)
        end
      end
    end
    puts("(b_1)処理時間 #{time}s")
    #/=============計測終了===============/
    return results
  rescue => e
    return e
  end
end

=begin
b. 改良版
   偶数を検査対象から除外
=end
def b_2(n)
  begin
    raise ArgumentError if n.nil? || 2 > n
    obj = FpPno.new(n)
    chk = Array.new(n,true)
    results = Array.new
    # 2の倍数をfalseとして初期化
    chk[2] = false
    chk.each_with_index{ |val,i| chk[i] = false if i % 2 == 0 }
    results.push(2)
    i = 3
    #/==============計測開始==============/
    time = Benchmark.realtime do
      while n >= i do
        if obj.chkNotPno(i) == true then
          i += 2
          next
        end
        if obj.judgePno2(i) == true then
          results.push(i)
        end
        i += 2
      end
    end
    puts("(b_2)処理時間 #{time}s")
    #/=============計測終了===============/
    return results
  rescue => e
    return e
  end
end
/=======================================================================/
上記のソースに対して以下のUTを実施した
/====================lec003/spec/fp03_06_spec.rb========================/
require __dir__ + "/spec_helper"
require __dir__ + '/../fp03_06.rb'
require __dir__ + '/../../modules/fp_pno.rb'

pnos = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,
73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,
179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,
283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,
419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,
547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,
661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,
811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,
947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,
1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,
1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,
1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,
1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,
1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,
1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,
1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,
2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,
2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,
2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,
2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,
2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,
2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,
3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,
3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,
3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571]

describe "FpPno" do
  obj = FpPno.new(100)
  for i in 0..24 do
    results = obj.notPnoInAry(pnos[i])
  end
  #it "notPnoInAry" do
  #  it "notPnoInAry" do
  #    expect(results).to eq true
  #  end
  #end
  context "chkNotPno" do
    it "chkNotPno(2)" do
      results = obj.chkNotPno(2)
      expect(results).to eq false
    end
    it "chkNotPno(3)" do
      results = obj.chkNotPno(3)
      expect(results).to eq false
    end
    it "chkNotPno(4)" do
      results = obj.chkNotPno(4)
      expect(results).to eq true
    end
    it "chkNotPno(5)" do
      results = obj.chkNotPno(5)
      expect(results).to eq false
    end
    it "chkNotPno(6)" do
      results = obj.chkNotPno(6)
      expect(results).to eq true
    end
    it "chkNotPno(6)" do
      results = obj.chkNotPno(7)
      expect(results).to eq false
    end
  end
end
describe "FpPno" do
  obj = FpPno.new(3571)
  context "judgePno" do
    it "judgePno(2)" do
      result = obj.judgePno(2)
      expect(result).to eq true
    end
    it "judgePno(3)" do
      result = obj.judgePno(3)
      expect(result).to eq true
    end
    it "judgePno(4)" do
      result = obj.judgePno(4)
      expect(result).to eq false
    end
    it "judgePno(5)" do
      result = obj.judgePno(5)
      expect(result).to eq true
    end
    it "judgePno(6)" do
      result = obj.judgePno(6)
      expect(result).to eq false
    end
    it "judgePno(7)" do
      result = obj.judgePno(7)
      expect(result).to eq true
    end
  end
  context "judgePno2" do
    it "judgePno2(2)" do
      result = obj.judgePno2(2)
      expect(result).to eq true
    end
    it "judgePno2(3)" do
      result = obj.judgePno2(3)
      expect(result).to eq true
    end
    it "judgePno2(4)" do
      result = obj.judgePno2(4)
      expect(result).to eq false
    end
    it "judgePno2(5)" do
      result = obj.judgePno2(5)
      expect(result).to eq true
    end
    it "judgePno2(6)" do
      result = obj.judgePno2(6)
      expect(result).to eq false
    end
    it "judgePno2(7)" do
      result = obj.judgePno2(7)
      expect(result).to eq true
    end
    it "judgePno2(3432)" do
      result = obj.judgePno2(3432)
      expect(result).to eq false
    end
    it "judgePno2(3433)" do
      result = obj.judgePno2(3433)
      expect(result).to eq true
    end
    it "judgePno2(3434)" do
      result = obj.judgePno2(3434)
      expect(result).to eq false
    end
    it "judgePno2(3435)" do
      result = obj.judgePno2(3435)
      expect(result).to eq false
    end
  end
end
describe "演習6" do
  context "a_0" do
    it "a_0(100)" do
      results = a_0(3571)
      expect(results).to eq pnos
    end
    it "a_0(1)" do
      results = a_0(1)
      expect(results).to be_a(ArgumentError)
    end
    it "a_0(nil)" do
      results = a_0(nil)
      expect(results).to be_a(ArgumentError)
    end
  end
  context "a_1" do
    it "a_1(100)" do
      results = a_1(3571)
      expect(results).to eq pnos
    end
    it "a_1(1)" do
      results = a_1(1)
      expect(results).to be_a(ArgumentError)
    end
    it "a_1(nil)" do
      results = a_1(nil)
      expect(results).to be_a(ArgumentError)
    end
  end
  context "a_2" do
    it "a_2(3571)" do
      results = a_2(3571)
      expect(results).to eq pnos
    end
    it "a_2(1)" do
      results = a_2(1)
      expect(results).to be_a(ArgumentError)
    end
    it "a_2(nil)" do
      results = a_2(nil)
      expect(results).to be_a(ArgumentError)
    end
  end
  context "b_1" do
    it "b_1(3571)" do
      results = b_1(3571)
      expect(results).to eq pnos
    end
    it "b_1(1)" do
      results = b_1(1)
      expect(results).to be_a(ArgumentError)
    end
    it "b_1(nil)" do
      results = b_1(nil)
      expect(results).to be_a(ArgumentError)
    end
  end
  context "b_2" do
    it "b_2(3571)" do
      results = b_2(3571)
      expect(results).to eq pnos
    end
    it "b_2(1)" do
      results = b_2(1)
      expect(results).to be_a(ArgumentError)
    end
    it "b_2(nil)" do
      results = b_2(nil)
      expect(results).to be_a(ArgumentError)
    end
  end
end
/=======================================================================/
[考察]
素数列挙の処理時間について考える
◆最も素直な実装
※メソッド名：a_0
irb(main):002:0> load 'fp03_06.rb'
=> true
irb(main):003:0> a_0 10000
(全検索)処理時間 0.4225517369923182s
=> nil
irb(main):004:0> a_0 20000
(全検索)処理時間 1.5395747869915795s
=> nil
irb(main):005:0> a_0 30000
(全検索)処理時間 3.2837343300052453s
=> nil
irb(main):006:0> a_0 40000
(全検索)処理時間 5.684445726976264s
=> nil
irb(main):007:0> a_0 60000
(全検索)処理時間 12.278404183016391s
=> nil
irb(main):008:0>
◆演習 6「a」を素直に実装してみる
「素数列挙」の問題は、配列を使うとより高速にできる可能性がある。次の 2 つの方針を用
いたプログラムを作成し、これまでに作ったものと速度を比較せよ。
a. 素数は値の大きいところではまばらにしかないので、これまでに見つかった素数を配列に
覚えておき、新たな素数の候補をチェックする時に「これまで見つかった素数で割ってみ
て割り切れなければ素数」という方針にすれば、チェックする回数がかなり少なくできる。
※メソッド名：a_1
irb(main):008:0> a_1 10000
(a_1)処理時間 0.4933478879975155s
=> nil
irb(main):009:0> a_1 20000
(a_1)処理時間 1.8137445769971237s
=> nil
irb(main):010:0> a_1 30000
(a_1)処理時間 3.658109885000158s
=> nil
irb(main):011:0> a_1 40000
(a_1)処理時間 6.335577115998603s
=> nil
irb(main):012:0> a_1 60000
(a_1)処理時間 13.544202485994902s
=> nil
最も基本的な素数列挙を実装したa_0のケースと比較してもやや低速な結果となった
◆演習 6を「a」に以下の改良を加えてみる
※ループカウンタの初期値を3、カウントアップを2とする
  偶数を検査対象から外してみる
irb(main):013:0> a_2 10000
(a_2)処理時間 0.3087859759980347s
=> nil
irb(main):014:0> a_2 20000
(a_2)処理時間 0.9533732270065229s
=> nil
irb(main):015:0> a_2 30000
(a_2)処理時間 2.023221834009746s
=> nil
irb(main):016:0> a_2 40000
(a_2)処理時間 3.4622320349735674s
=> nil
irb(main):017:0> a_2 60000
(a_2)処理時間 7.425954770995304s
=> nil
素朴な実装であるa_0と比較して40%程度の高速化が達成できた
◆演習 6「a」を素直に実装してみる
b. 別の考え方として、N 未満の素数を打ち出すのに次の方針を用いるのはどうだろう。
• 論理値が並んだ要素数 N の配列を作り、全部「真」に初期化。
• 2 から始めて順次、その番号が「真」の値は素数として出力。
• 2、4、6、…と、2 の倍数番目の部分を「偽」に変更。
• 3、6、9、…と、3 の倍数番目の部分を「偽」に変更。
• 同様に、素数を出力するごとにその倍数番目を「偽」に変更。
irb(main):021:0> b_1 10000
(b_1)処理時間 0.4512322189984843s
=> nil
irb(main):022:0> b_1 20000
(b_1)処理時間 1.5543976270128042s
=> nil
irb(main):023:0> b_1 30000
(b_1)処理時間 3.3067603320232593s
=> nil
irb(main):024:0> b_1 40000
(b_1)処理時間 5.71425603798707s
=> nil
irb(main):025:0> b_1 60000
(b_1)処理時間 12.492717287008418s
=> nil
a_0とほぼ等価な結果が得られた
◆演習 6を「b」に以下の改良を加えてみる
※ループカウンタの初期値を3、カウントアップを2とする
  偶数を検査対象から外してみる
irb(main):028:0> b_2 10000
(b_2)処理時間 0.2282664029917214s
=> nil
irb(main):029:0> b_2 20000
(b_2)処理時間 0.8046997909841593s
=> nil
irb(main):030:0> b_2 30000
(b_2)処理時間 1.6583488249743823s
=> nil
irb(main):031:0> b_2 40000
(b_2)処理時間 2.9189229020266794s
=> nil
irb(main):032:0> b_2 60000
(b_2)処理時間 6.212235318991588s
=> nil
a_0と比較して50%程度、最も高速な実行結果が得られた
◆a_0、a_2、b_2のメソッドで200000まで列挙してみる
・a_0(最も基本的な素数列挙)
irb(main):034:0> a_0 200000
(全検索)処理時間 143.65448885099613s
=> nil
・a_2(設問aの改良版)
irb(main):033:0> a_2 200000
(a_2)処理時間 72.36852852901211s
=> nil
irb(main):035:0> b_2 200000
(b_2)処理時間 84.40060054900823s
=> nil
◆～60000までで最も遅かったa_1で200000まで列挙してみる
irb(main):036:0> a_1 200000
(a_1)処理時間 171.36744016598095s
=> nil
アルゴリズム的特性から、値が大きくなることでa_0の実行結果に対して「追い越し」が発生する事を期待したが、
メソッドa_1の実装の特徴である「ダブルチェック」の影響により極めて低速な実行結果が得られた。
◆第２構、設問7の実行結果と比較してみる
/==========================lec002/fp02_07.rb============================/
require './fp02_06'
require 'benchmark'
require 'bigdecimal'
require 'bigdecimal/util'

def main(n)
  begin
    raise ArgumentError if n == nil
    obj = Fp02_06.new
    n = n.to_i.abs
    results = Array.new
    results.push(2)
    i = 3
    #/==============計測開始==============/
    time = Benchmark.realtime do
      while n >= i do
        results.push(i) if obj.p(i)
        i += 2
      end
    end
    puts("処理時間 #{time}s")
    #/=============計測終了===============/
    #return results
  rescue => e
    return e
  end
end
/=======================================================================/
irb(main):002:0> main 200000
処理時間 61.893176607991336s
=> nil
最速の実行結果が得られた。
◆結論
結果的に最も基本的な素数列挙に若干の改良を行った実装が最も高速となった。
演習6、a、bの実装、特にダブルチェックとなっている部分の実装が実行時間に顕著に影響していると考えられる結果となった。

[アンケート]
Q1. 枝分かれや繰り返しの動き方が納得できましたか?
一応理解できたと考える。
Q2. 枝分かれと繰り返しのどっちが難しいですか? それはなぜ?
何れも基本的な処理であり難しいとは考えない。
Q3. リフレクション(今回の課題で分かったこと)・感想・要望をどうぞ。
特になし。
